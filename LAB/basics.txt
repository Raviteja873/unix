Here's a basic overview of **operators** and **looping statements** in **shell scripting**.

### **1. Operators in Shell Scripting**

#### **Arithmetic Operators**  
Used for mathematical calculations.

```sh
a=10
b=5
echo $((a + b))   # Addition
echo $((a - b))   # Subtraction
echo $((a * b))   # Multiplication
echo $((a / b))   # Division
echo $((a % b))   # Modulo (remainder)
```

#### **Relational Operators**  
Used to compare two values.

```sh
a=10
b=5
if [ $a -eq $b ]; then echo "Equal"; fi   # Equal to
if [ $a -ne $b ]; then echo "Not equal"; fi   # Not equal to
if [ $a -lt $b ]; then echo "Less than"; fi   # Less than
if [ $a -gt $b ]; then echo "Greater than"; fi   # Greater than
if [ $a -le $b ]; then echo "Less than or equal to"; fi   # Less than or equal to
if [ $a -ge $b ]; then echo "Greater than or equal to"; fi   # Greater than or equal to
```

#### **Logical Operators**  
Used for logical comparisons.

```sh
a=10
b=5
if [ $a -gt $b ] && [ $a -eq 10 ]; then echo "Both conditions are true"; fi  # AND
if [ $a -gt $b ] || [ $a -eq 5 ]; then echo "At least one condition is true"; fi  # OR
```

#### **String Operators**  
Used for comparing strings.

```sh
str1="hello"
str2="world"
if [ "$str1" = "$str2" ]; then echo "Strings are equal"; fi   # Equal
if [ "$str1" != "$str2" ]; then echo "Strings are not equal"; fi   # Not equal
```

#### **File Operators**  
Used for file-related conditions.

```sh
file="example.txt"
if [ -e $file ]; then echo "File exists"; fi   # Exists
if [ -f $file ]; then echo "Is a regular file"; fi   # Regular file
if [ -d $file ]; then echo "Is a directory"; fi   # Directory
```

---

### **2. Looping Statements in Shell Scripting**

#### **For Loop**
Used to iterate over a series of values or a set of commands.

```sh
# Loop through a list of values
for i in 1 2 3 4 5
do
  echo "Value: $i"
done

# Loop with a sequence of numbers
for i in {1..5}
do
  echo "Value: $i"
done

# Loop with a step size
for i in {1..10..2}
do
  echo "Value: $i"
done
```

#### **While Loop**
Executes the code block as long as the condition is true.

```sh
a=1
while [ $a -le 5 ]
do
  echo "Value: $a"
  a=$((a + 1))
done
```

#### **Until Loop**
Executes the code block until the condition becomes true.

```sh
a=1
until [ $a -gt 5 ]
do
  echo "Value: $a"
  a=$((a + 1))
done
```

#### **Infinite Loop**
You can create an infinite loop using `while true` or `for` with no conditions.

```sh
# Infinite loop
while true
do
  echo "This will run forever"
done
```

#### **Break and Continue in Loops**

- **`break`**: Exits the loop entirely.
- **`continue`**: Skips the current iteration and moves to the next one.

Example:
```sh
for i in {1..5}
do
  if [ $i -eq 3 ]; then
    continue   # Skips when i is 3
  fi
  if [ $i -eq 4 ]; then
    break   # Breaks when i is 4
  fi
  echo $i
done
```

---

### **3. Example Script with Operators and Loops**

Hereâ€™s an example that combines operators and loops:

```sh
echo "Enter a number:"
read n
sum=0

for ((i=1; i<=n; i++))
do
  sum=$((sum + i))   # Arithmetic addition
done

echo "The sum of numbers from 1 to $n is: $sum"
```

---

### Summary

- **Operators** in shell scripting include arithmetic, relational, logical, string, and file operators.
- **Looping statements** allow repetitive execution: `for`, `while`, and `until` are commonly used.
- **Control flow** can be adjusted with `break` (to exit) and `continue` (to skip iterations).

Let me know if you need more examples or explanations!